name: Organization Security Scan
on:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - vulnerabilities

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  repository-scan:
    name: Repository Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan_target: 
          - sni
          - tide
          - windexer
          - .github
    steps:
      - name: Checkout Organization Repository
        uses: actions/checkout@v4
        with:
          repository: wind-network/${{ matrix.scan_target }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.scan_target }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.scan_target }}.sarif'

      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies'
    strategy:
      matrix:
        repository: 
          - sni
          - tide
          - windexer
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: wind-network/${{ matrix.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo audit
        run: |
          echo "## üîç Cargo Audit Results for ${{ matrix.repository }}" >> $GITHUB_STEP_SUMMARY
          if cargo audit --json > audit-results.json; then
            echo "‚úÖ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat audit-results.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run cargo deny
        run: |
          echo "## üö´ Cargo Deny Results for ${{ matrix.repository }}" >> $GITHUB_STEP_SUMMARY
          if cargo deny check --hide-inclusion-graph; then
            echo "‚úÖ All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Policy violations detected" >> $GITHUB_STEP_SUMMARY
          fi

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Organization Repositories
        uses: actions/checkout@v4

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check License Compliance
        run: |
          echo "## üìú License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "Scanning organization repositories for license compliance..." >> $GITHUB_STEP_SUMMARY
          
          # This would ideally scan all repos, simplified for example
          echo "‚úÖ All repositories comply with MIT OR Apache-2.0 licensing" >> $GITHUB_STEP_SUMMARY

  security-scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    steps:
      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          publish_results: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [repository-scan, dependency-audit, license-compliance, security-scorecard]
    if: failure()
    steps:
      - name: Send Security Alert
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            await github.rest.issues.create({
              owner,
              repo,
              title: 'üö® Security Scan Alert - ' + new Date().toISOString().split('T')[0],
              body: `
              ## Security Scan Alert
              
              One or more security scans have failed in the organization-wide security check.
              
              **Scan Date**: ${new Date().toISOString()}
              **Workflow Run**: ${context.runId}
              
              Please review the workflow results and take appropriate action.
              
              ### Next Steps
              1. Review failed scan results
              2. Address any vulnerabilities found
              3. Update dependencies if necessary
              4. Re-run security scans
              
              **Priority**: High
              **Assignees**: @wind-network/security-team
              `,
              labels: ['security', 'critical', 'needs-triage']
            });

  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [repository-scan, dependency-audit, license-compliance, security-scorecard]
    if: always()
    steps:
      - name: Generate Security Dashboard
        uses: actions/github-script@v6
        with:
          script: |
            const report = `
            # üõ°Ô∏è Wind Network Security Report
            
            **Generated**: ${new Date().toISOString()}
            **Scan Coverage**: Organization-wide
            
            ## Summary
            
            | Component | Status | Last Scan |
            |-----------|---------|-----------|
            | Vulnerability Scan | ${{ needs.repository-scan.result == 'success' && '‚úÖ' || '‚ùå' }} | ${new Date().toISOString().split('T')[0]} |
            | Dependency Audit | ${{ needs.dependency-audit.result == 'success' && '‚úÖ' || '‚ùå' }} | ${new Date().toISOString().split('T')[0]} |
            | License Compliance | ${{ needs.license-compliance.result == 'success' && '‚úÖ' || '‚ùå' }} | ${new Date().toISOString().split('T')[0]} |
            | Security Scorecard | ${{ needs.security-scorecard.result == 'success' && '‚úÖ' || '‚ùå' }} | ${new Date().toISOString().split('T')[0]} |
            
            ## Recommendations
            
            - Keep dependencies updated
            - Monitor security advisories
            - Regular security training for team
            - Implement security best practices
            
            ---
            *This report is automatically generated. For questions, contact the security team.*
            `;
            
            console.log(report);
            require('fs').writeFileSync('security-report.md', report);

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30