name: Release
on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="${{ github.event.repository.name }}.exe"
            ARCHIVE_NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-${{ matrix.target }}.zip"
            7z a $ARCHIVE_NAME ./target/${{ matrix.target }}/release/$BINARY_NAME
          else
            BINARY_NAME="${{ github.event.repository.name }}"
            ARCHIVE_NAME="${{ github.event.repository.name }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz"
            tar -czf $ARCHIVE_NAME -C ./target/${{ matrix.target }}/release $BINARY_NAME
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-${{ github.ref_name }}-${{ matrix.target }}.*
          asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-${{ matrix.target }}
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: build-and-upload
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }}